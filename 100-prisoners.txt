/*
Extra credit:
 - Find a clever way to implement the third funcion above that doesn't simply call the second funciton in a nieve loop
     - Hint: if a prisoner finds their nmber in a chain of 20 numbers, all of the other prisoners on the chain will find their number
     - Self hint: if >50 prisoners find their number, every prisoner has found their number
 - Implement your own random number generator, a better on ethan the standard library rand()
     - Alternatively, find a way to use the Mersenne Twistor using code that you include with your project
 - Investigate what happens as the number of prisoners tends to infinity.
     - Ex: exompile a tabl of values for 100, 200, 300, ..., 2000
 - Anything else I can think of in C and clearly related to the project    


______
cout << "How many times would you like to simulate the 100 prisoner problem?\n>"
cout << "do you want more to try a custom number of prisoners? (y/n)\n>"
if y:
cout << "How many prisoners are we talking about?\n>"

Idea for main:
int num_prisoners = userinput, must be multiple of 100. bool stop = num_prisoners mod 100, if stop = 0 we have a valid value.
*/



// initializeRoom(int room[], int roomSize)
// initializeRoom(room, SIZE)



how to implement a Cryptographically Secure RNG in c

#include <openssl/rand.h>

int main() {
  // Seed the RNG with some entropy.
  RAND_seed(time(NULL));

  // Generate a random number.
  int random_number = RAND_bytes(sizeof(random_number), &random_number);

  // Do something with the random number.
  // ...

  return 0;
}